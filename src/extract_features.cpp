#include <iostream>
#include <string>

#include <affine_invariant_features/affine_invariant_feature.hpp>
#include <affine_invariant_features/feature_parameters.hpp>
#include <affine_invariant_features/results.hpp>
#include <affine_invariant_features/target.hpp>

#include <opencv2/core.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/highgui.hpp>

#include "aif_assert.hpp"

int main(int argc, char *argv[]) {
  namespace aif = affine_invariant_features;

  const cv::CommandLineParser args(
      argc, argv, "{ help | | }"
                  "{ use-simple-feature | <none> | will not use affine invariant sampling }"
                  "{ @parameter-file | <none> | can be generated by generate_parameter_file }"
                  "{ @target-file | <none> | can be generated by generate_target_file }"
                  "{ @result-file | <none> | }");

  if (args.has("help")) {
    args.printMessage();
    return 0;
  }

  const bool use_simple_feature(args.has("use-simple-feature"));
  const std::string param_path(args.get< std::string >("@parameter-file"));
  const std::string target_path(args.get< std::string >("@target-file"));
  const std::string result_path(args.get< std::string >("@result-file"));
  if (!args.check()) {
    args.printErrors();
    return 1;
  }

  const cv::FileStorage param_file(param_path, cv::FileStorage::READ);
  AIF_Assert(param_file.isOpened(), "Could not open %s", param_path.c_str());

  const cv::Ptr< const aif::FeatureParameters > params(
      aif::load< aif::FeatureParameters >(param_file.root()));
  AIF_Assert(params, "Could not load a parameter set from %s", param_path.c_str());

  const cv::FileStorage target_file(target_path, cv::FileStorage::READ);
  AIF_Assert(target_file.isOpened(), "Could not open %s", target_path.c_str());

  const cv::Ptr< const aif::TargetDescription > target_desc(
      aif::load< aif::TargetDescription >(target_file.root()));
  AIF_Assert(target_desc, "Could not load an target description from %s", target_path.c_str());

  const cv::Ptr< const aif::TargetData > target_data(aif::TargetData::retrieve(*target_desc));
  AIF_Assert(target_data, "Could not load target data described in %s", target_path.c_str());

  cv::Mat target_image(target_data->image / 4);
  target_data->image.copyTo(target_image, target_data->mask);
  std::cout << "Showing the target image with mask. Press any key to continue." << std::endl;
  cv::imshow("Target", target_image);
  cv::waitKey(0);

  std::cout << "Extracting features. This may take seconds or minutes." << std::endl;
  cv::Ptr< cv::Feature2D > feature;
  if (use_simple_feature) {
    feature = params->createFeature();
  } else {
    feature = aif::AffineInvariantFeature::create(params->createFeature());
  }
  aif::Results results;
  feature->detectAndCompute(target_data->image, target_data->mask, results.keypoints,
                            results.descriptors);
  results.normType = feature->defaultNorm();

  cv::Mat result_image;
  cv::drawKeypoints(target_image, results.keypoints, result_image);
  std::cout << "Showing a result image with keypoints. Press any key to continue." << std::endl;
  cv::imshow("Results", result_image);
  cv::waitKey(0);

  cv::FileStorage result_file(result_path, cv::FileStorage::WRITE);
  AIF_Assert(result_file.isOpened(), "Could not open or create %s", result_path.c_str());

  params->save(result_file);
  target_desc->save(result_file);
  results.save(result_file);
  std::cout << "Wrote context and results of feature extraction to " << result_path << std::endl;

  return 0;
}
